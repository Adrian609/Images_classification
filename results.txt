results:  
Epochs=60 accuracy:  0.703 time: 0:59 Conv2D(32x1,64X1,strides1),Flatten4096,Dropout0.1 mode=02  
Epochs=60 accuracy:  0.752 time: 0:31 Conv2D(32x2,64X2,strides1),Flatten256,Dropout0.1  mode=02           
Epochs=60 accuracy:  0.730 time: 0:33 Conv2D(32x3,64X2,strides1),Flatten64,Dropout0.1   mode=02  
Epochs=60 accuracy:  0.781 time: 1:22 Conv2D(32x2,48x2,64X2,strides2),Flatten1024,Dropout0.1,lr0.0001  mode=02  
Epochs=60 accuracy:  0.793 time: 1:28 Conv2D(32x2,48x2,64X2,strides2),Flatten1024,Dropout0.25,lr0.0001  mode=02 
Epochs=60 accuracy:  0.767 time: 1:39 Conv2D(32x2,48x2,64X2,strides2),Flatten1024,Dropout0.25,lr0.0002  mode=02  
Epochs=60 accuracy:  0.799 time: 1:56 Conv2D(32x2,48x2,64X2,strides2),Flatten1024,Dropout0.25,lr0.00005  mode=02  
Epochs=200 accuracy: 0.766 time: 5:23 Conv2D(32x2,48x2,64X2,strides2),Flatten1024,Dropout0.25,lr0.00005,use_bias=True mode=02  
Epochs=80 accuracy:  0.766 time: 3:09 Conv2D(64x2,48x2,32X2,strides2),Flatten32,Dropout0.25,lr0.00005 mode=02  
Epochs=80 accuracy:  0.760 time: 2:14 Conv2D(32x2,40x2,48X2,56X2,64X2),paddingSame,Flatten64,Dropout0.25,lr0.00005 mode=02  
Epochs=80 accuracy:  0.794 time: 2:18 Conv2D(32x2,48x2,64X2),Flatten1024,Dropout0.25,lr0.00005 mode=02          
Epochs=80 accuracy:  0.738 time: 1:12 Conv2D(16x2,32x2,48x2,64X2),Flatten256,Dropout0.25,lr0.00005 mode=02    
Epochs=80 accuracy:  0.786 time: 2:25 Conv2D(32x2,48x2,64X2),Flatten256,Dropout0.25,lr0.00005,batch32 mode=02 
Epochs=60 accuracy:  0.788 time: 2:11 CNN32x2,CNN48x2,CNN64x2,flatten256,Dropout0.25lr0.00005,batch32 mode=01      
Epochs=60 accuracy:  0.693 time: 2:59 CNN32x2,CNN48x2,CNN64x2,flatten256,Dropout0.25lr0.0001,batch16  mode=01                  
Epochs=60 accuracy:  0.800 time: 2:07 CNN32x2,CNN48x2,CNN64x2,flatten256,Dropout0.25lr0.0001,batch64  mode=01 
Epochs=80 accuracy:  0.748 time: 2:18 CNN32x2,CNN48x2,CNN64x2,flatten256,Dropout0.25lr0.00005,batch64 mode=01             
Epochs=80 accuracy:  0.807 time: 2:07 CNN32x2,CNN48x2,CNN64x2,flatten256,Dropout0.25lr0.0002,batch64  mode=01
Epochs=80 accuracy:  0.736 time: 2:11 CNN32x2,CNN48x2,CNN64x2,flatten256,Dropout0.25lr0.0005,batch64  mode=01
Epochs=200 accuracy: 0.799 time: 5:44 CNN32x2,CNN48x2,CNN64x2,flatten256,Dropout0.25lr0.0002,batch64  mode=01
Epochs=70 accuracy:  0.776 time: 2:20 CNN32x2,CNN48x2,CNN64x2,flatten256,Dropout0.25lr0.0002,batch64  mode=01


#define the convnet
model = Sequential()
###################################################################################
#  model 1
###################################################################################
# CONV => RELU => CONV => RELU => POOL => DROPOUT
model.add(Conv2D(32, (3, 3), padding='same',input_shape=x_train.shape[1:]))
model.add(Activation('relu'))
model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

# CONV => RELU => CONV => RELU => POOL => DROPOUT
model.add(Conv2D(48, (3, 3), padding='same'))
model.add(Activation('relu'))
model.add(Conv2D(48, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

# CONV => RELU => CONV => RELU => POOL => DROPOUT
model.add(Conv2D(64, (3, 3), padding='same'))
model.add(Activation('relu'))
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

# FLATTERN => DENSE => RELU => DROPOUT
model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
# a softmax classifier
model.add(Dense(num_classes))
model.add(Activation('softmax'))

model.summary()


###################################################################################
#  model 2
###################################################################################
model.add(Conv2D(32, (3, 3), padding='same', activation="relu", input_shape=(32, 32, 3)))
model.add(Conv2D(32, (3, 3), padding="same", activation="relu"))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(48, (3, 3), padding="same", activation="relu"))
model.add(Conv2D(48, (3, 3), padding="same", activation="relu"))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(64, (3, 3), padding="same", activation="relu"))
model.add(Conv2D(64, (3, 3), padding="same", activation="relu"))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

# FLATTERN => DENSE => RELU => DROPOUT
model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
# a softmax classifier
model.add(Dense(num_classes))
model.add(Activation('softmax'))

model.summary()




